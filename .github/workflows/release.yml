name: Release

on:
  push:
    tags:
      - "v*.*.*" # Only trigger on semantic version tags

jobs:
  build_and_release:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Check out code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Validate tag format and permissions
        id: validate_tag
        run: |
          TAG_NAME=${GITHUB_REF#refs/tags/}
          echo "TAG_NAME=${TAG_NAME}" >> $GITHUB_ENV

          # Check if tag creator is the repository owner
          if [[ "${{ github.actor }}" != "${{ secrets.RELEASE_AUTHOR }}" ]]; then
            echo "‚ùå Only @${{ secrets.RELEASE_AUTHOR }} can create release tags"
            echo "Tag creator: ${{ github.actor }}"
            exit 1
          fi

          # Check tag format
          if [[ "${TAG_NAME}" =~ ^v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "valid=true" >> $GITHUB_OUTPUT
            echo "‚úÖ Valid tag format: ${TAG_NAME}"
            echo "‚úÖ Authorized user: ${{ github.actor }}"
          else
            echo "valid=false" >> $GITHUB_OUTPUT
            echo "‚ùå Invalid tag format: ${TAG_NAME}"
            echo "Expected format: v1.2.3"
            exit 1
          fi

      - name: Check for release notes file
        id: check_notes
        run: |
          NOTES_FILE="releases/${TAG_NAME}.md"
          if [ -f "$NOTES_FILE" ]; then
            echo "notes_exist=true" >> $GITHUB_OUTPUT
            echo "notes_file=${NOTES_FILE}" >> $GITHUB_OUTPUT
            echo "‚úÖ Found release notes: ${NOTES_FILE}"
          else
            echo "notes_exist=false" >> $GITHUB_OUTPUT
            echo "‚ùå Release notes not found: ${NOTES_FILE}"
            echo "Please create ${NOTES_FILE} before pushing the tag"
            exit 1
          fi

      - name: Setup Go
        if: steps.validate_tag.outputs.valid == 'true' && steps.check_notes.outputs.notes_exist == 'true'
        uses: actions/setup-go@v4
        with:
          go-version: "1.21"

      - name: Set version variables
        if: steps.validate_tag.outputs.valid == 'true' && steps.check_notes.outputs.notes_exist == 'true'
        run: |
          echo "VERSION=${TAG_NAME}" >> $GITHUB_ENV
          echo "BUILD_TIME=$(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_ENV
          echo "GIT_COMMIT=$(git rev-parse --short HEAD)" >> $GITHUB_ENV

          echo "üöÄ Auto-releasing cxusage ${TAG_NAME}"
          echo "Build time: $(date -u '+%Y-%m-%d %H:%M:%S UTC')"
          echo "Git commit: $(git rev-parse --short HEAD)"

      - name: Build Cross-Platform Binaries
        if: steps.validate_tag.outputs.valid == 'true' && steps.check_notes.outputs.notes_exist == 'true'
        run: |
          mkdir -p release

          LDFLAGS="-X 'github.com/johanneserhardt/cxusage/internal/commands.Version=${VERSION}' -X 'github.com/johanneserhardt/cxusage/internal/commands.BuildTime=${BUILD_TIME}' -X 'github.com/johanneserhardt/cxusage/internal/commands.GitCommit=${GIT_COMMIT}'"

          echo "üî® Building binaries..."
          CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build -ldflags "$LDFLAGS" -o release/cxusage-linux-amd64 ./cmd/cxusage
          CGO_ENABLED=0 GOOS=linux GOARCH=arm64 go build -ldflags "$LDFLAGS" -o release/cxusage-linux-arm64 ./cmd/cxusage
          CGO_ENABLED=0 GOOS=darwin GOARCH=amd64 go build -ldflags "$LDFLAGS" -o release/cxusage-darwin-amd64 ./cmd/cxusage
          CGO_ENABLED=0 GOOS=darwin GOARCH=arm64 go build -ldflags "$LDFLAGS" -o release/cxusage-darwin-arm64 ./cmd/cxusage
          CGO_ENABLED=0 GOOS=windows GOARCH=amd64 go build -ldflags "$LDFLAGS" -o release/cxusage-windows-amd64.exe ./cmd/cxusage

          echo "‚úÖ Build completed!"
          ls -la release/

      - name: Create GitHub Release
        if: steps.validate_tag.outputs.valid == 'true' && steps.check_notes.outputs.notes_exist == 'true'
        run: |
          echo "üéâ Creating GitHub release..."

          # Create release with tag as title and notes from file
          gh release create "${TAG_NAME}" \
            --title "${TAG_NAME}" \
            --notes-file "${{ steps.check_notes.outputs.notes_file }}" \
            --latest \
            release/cxusage-linux-amd64 \
            release/cxusage-linux-arm64 \
            release/cxusage-darwin-amd64 \
            release/cxusage-darwin-arm64 \
            release/cxusage-windows-amd64.exe

          echo "‚úÖ Release created successfully!"
          echo "üîó View at: https://github.com/${{ github.repository }}/releases/tag/${TAG_NAME}"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Generate and upload Homebrew formula (optional install via brew)
        if: steps.validate_tag.outputs.valid == 'true' && steps.check_notes.outputs.notes_exist == 'true'
        run: |
          set -euo pipefail

          TAG_NAME=${GITHUB_REF#refs/tags/}
          REPO="$GITHUB_REPOSITORY"

          # Download built assets to compute SHA256 sums for Homebrew
          gh release download "$TAG_NAME" -p "cxusage-darwin-amd64" -O cxusage-darwin-amd64
          gh release download "$TAG_NAME" -p "cxusage-darwin-arm64" -O cxusage-darwin-arm64
          gh release download "$TAG_NAME" -p "cxusage-linux-amd64"  -O cxusage-linux-amd64
          gh release download "$TAG_NAME" -p "cxusage-linux-arm64"  -O cxusage-linux-arm64

          # Compute SHA256 (use sha256sum which is available on ubuntu-latest)
          SHA_DARWIN_AMD64=$(sha256sum cxusage-darwin-amd64 | cut -d ' ' -f1)
          SHA_DARWIN_ARM64=$(sha256sum cxusage-darwin-arm64 | cut -d ' ' -f1)
          SHA_LINUX_AMD64=$(sha256sum  cxusage-linux-amd64  | cut -d ' ' -f1)
          SHA_LINUX_ARM64=$(sha256sum  cxusage-linux-arm64  | cut -d ' ' -f1)

          cat > cxusage.rb.tmpl <<'EOF'
          class Cxusage < Formula
            desc "Codex CLI usage tracker with live dashboard"
            homepage "https://github.com/${REPO}"
            version "${VERSION_STR}"
            license "MIT"

            on_macos do
              on_intel do
                url "https://github.com/${REPO}/releases/download/${TAG_NAME}/cxusage-darwin-amd64", :using => :nounzip
                sha256 "${SHA_DARWIN_AMD64}"
              end
              on_arm do
                url "https://github.com/${REPO}/releases/download/${TAG_NAME}/cxusage-darwin-arm64", :using => :nounzip
                sha256 "${SHA_DARWIN_ARM64}"
              end
            end

            on_linux do
              on_intel do
                url "https://github.com/${REPO}/releases/download/${TAG_NAME}/cxusage-linux-amd64", :using => :nounzip
                sha256 "${SHA_LINUX_AMD64}"
              end
              on_arm do
                url "https://github.com/${REPO}/releases/download/${TAG_NAME}/cxusage-linux-arm64", :using => :nounzip
                sha256 "${SHA_LINUX_ARM64}"
              end
            end

            def install
              bin.install Dir["cxusage-*"][0] => "cxusage"
              bin.install_symlink bin/"cxusage" => "cx"
            end

            test do
              system "#{bin}/cxusage", "version"
            end
          end
          EOF

          VERSION_STR=${TAG_NAME#v}
          env \
            REPO="$REPO" TAG_NAME="$TAG_NAME" VERSION_STR="$VERSION_STR" \
            SHA_DARWIN_AMD64="$SHA_DARWIN_AMD64" SHA_DARWIN_ARM64="$SHA_DARWIN_ARM64" \
            SHA_LINUX_AMD64="$SHA_LINUX_AMD64" SHA_LINUX_ARM64="$SHA_LINUX_ARM64" \
            envsubst < cxusage.rb.tmpl > cxusage.rb

          # Upload formula to the release so users can brew install via a URL
          gh release upload "$TAG_NAME" cxusage.rb --clobber
        env:
          GH_TOKEN: ${{ github.token }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Update Homebrew Tap
        if: steps.validate_tag.outputs.valid == 'true' && steps.check_notes.outputs.notes_exist == 'true'
        env:
          TAP_OWNER: johanneserhardt
          TAP_REPO: homebrew-tap
          TAP_TOKEN: ${{ secrets.TAP_GITHUB_TOKEN }}
          GH_TOKEN: ${{ github.token }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -euo pipefail

          # Check if TAP_TOKEN is available
          if [[ -z "$TAP_TOKEN" ]]; then
            echo "‚ö†Ô∏è TAP_GITHUB_TOKEN not configured, skipping tap update"
            echo "üí° Add TAP_GITHUB_TOKEN secret to enable automatic tap publishing"
            exit 0
          fi

          TAG_NAME=${GITHUB_REF#refs/tags/}
          FORMULA_NAME="cxusage"

          # Create temporary directory
          workdir=$(mktemp -d)
          cd "$workdir"

          echo "üì• Cloning tap repository: ${TAP_OWNER}/${TAP_REPO}"
          git clone "https://x-access-token:${TAP_TOKEN}@github.com/${TAP_OWNER}/${TAP_REPO}.git" tap
          mkdir -p tap/Formula

          # Download and compute checksums for tap formula
          echo "‚¨áÔ∏è Downloading assets to compute checksums for tap..."
          gh release download "$TAG_NAME" -R "${{ github.repository }}" -p "cxusage-darwin-amd64" -O cxusage-darwin-amd64
          gh release download "$TAG_NAME" -R "${{ github.repository }}" -p "cxusage-darwin-arm64" -O cxusage-darwin-arm64
          gh release download "$TAG_NAME" -R "${{ github.repository }}" -p "cxusage-linux-amd64"  -O cxusage-linux-amd64
          gh release download "$TAG_NAME" -R "${{ github.repository }}" -p "cxusage-linux-arm64"  -O cxusage-linux-arm64

          SHA_DARWIN_AMD64=$(sha256sum cxusage-darwin-amd64 | cut -d ' ' -f1)
          SHA_DARWIN_ARM64=$(sha256sum cxusage-darwin-arm64 | cut -d ' ' -f1)
          SHA_LINUX_AMD64=$(sha256sum  cxusage-linux-amd64  | cut -d ' ' -f1)
          SHA_LINUX_ARM64=$(sha256sum  cxusage-linux-arm64  | cut -d ' ' -f1)

          FORMULA_PATH="tap/Formula/${FORMULA_NAME}.rb"
          VERSION_STR="${TAG_NAME#v}"
          REPO="${{ github.repository }}"

          cat > "${FORMULA_PATH}.tmpl" <<'EOF'
          class CXFORMULA < Formula
            desc "Codex CLI usage tracker with live dashboard"
            homepage "https://github.com/${REPO}"
            version "${VERSION_STR}"
            license "MIT"

            on_macos do
              on_intel do
                url "https://github.com/${REPO}/releases/download/${TAG_NAME}/${FORMULA_NAME}-darwin-amd64", :using => :nounzip
                sha256 "${SHA_DARWIN_AMD64}"
              end
              on_arm do
                url "https://github.com/${REPO}/releases/download/${TAG_NAME}/${FORMULA_NAME}-darwin-arm64", :using => :nounzip
                sha256 "${SHA_DARWIN_ARM64}"
              end
            end

            on_linux do
              on_intel do
                url "https://github.com/${REPO}/releases/download/${TAG_NAME}/${FORMULA_NAME}-linux-amd64", :using => :nounzip
                sha256 "${SHA_LINUX_AMD64}"
              end
              on_arm do
                url "https://github.com/${REPO}/releases/download/${TAG_NAME}/${FORMULA_NAME}-linux-arm64", :using => :nounzip
                sha256 "${SHA_LINUX_ARM64}"
              end
            end

            def install
              bin.install Dir["${FORMULA_NAME}-*"][0] => "${FORMULA_NAME}"
              bin.install_symlink bin/"${FORMULA_NAME}" => "cx"
            end

            test do
              system "#{bin}/${FORMULA_NAME}", "version"
            end
          end
          EOF

          env REPO="$REPO" TAG_NAME="$TAG_NAME" VERSION_STR="$VERSION_STR" \
            FORMULA_NAME="$FORMULA_NAME" \
            SHA_DARWIN_AMD64="$SHA_DARWIN_AMD64" SHA_DARWIN_ARM64="$SHA_DARWIN_ARM64" \
            SHA_LINUX_AMD64="$SHA_LINUX_AMD64" SHA_LINUX_ARM64="$SHA_LINUX_ARM64" \
            envsubst < "${FORMULA_PATH}.tmpl" | sed "s/CXFORMULA/${FORMULA_NAME^}/g" > "${FORMULA_PATH}"

          # Commit and push to tap repository
          cd tap
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git add "Formula/${FORMULA_NAME}.rb"
          git commit -m "${FORMULA_NAME} ${TAG_NAME}"
          git push

          echo "‚úÖ Updated Homebrew tap: ${TAP_OWNER}/${TAP_REPO}"
          echo "üëâ Users can now: brew tap ${TAP_OWNER}/tap && brew install ${FORMULA_NAME}"

          # Cleanup
          rm -rf "$workdir"
